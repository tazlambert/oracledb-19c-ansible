# ==> Configure Linux for Oracle Database 19c
- name: Add Oracle Linux Repo
  get_url: url=https://yum.oracle.com/public-yum-ol7.repo dest=/etc/yum.repos.d/public-yum-ol7.repo 
  become: yes
- name: Add GPG Oracle Linux Repo
  get_url: url=https://public-yum.oracle.com/RPM-GPG-KEY-oracle-ol7 dest=/etc/pki/rpm-gpg/RPM-GPG-KEY-oracle
  become: yes
- name: Install required libraries
  yum: 
    state: present
    name: "{{ packages_list }}"

- name: Disable SELinux
  selinux: state=disabled
- name: Disable Firewall Deamon (firewalld)
  service: name=firewalld state=stopped enabled=no

# ==> Create Base directories
- name: Create Oracle Base directory
  file: state=directory path={{ oracle_base }} owner={{ oracle_user }} group={{ oracle_install_group }}

# ==> Disable transparent hugepages
- name: Copy script
  copy: src=disable_trans_hugepages.sh dest='~/disable_trans_hugepages.sh' mode=755
- name: Disable Transparent Huge Pages
  shell: '~/disable_trans_hugepages.sh'

# ==> Configure huge pages
- name: configure kernel for hugepages
  sysctl: name="vm.nr_hugepages" value="{{ hugepages_nr | int }}" state=present
  tags:
    - hugepages

# ==> Add Swap
- name: Copy add_swap script
  copy: src=add_swap.sh dest='~/add_swap.sh' mode=755
- name: Add Swap
  shell: '~/add_swap.sh'

# ==> Update Hostname, add with items as more hosts added
- name: Update the /etc/hosts file with node name
  tags: etchostsupdate
  become: yes
  become_user: root
  lineinfile:
    dest: "/etc/hosts"
    regexp: ".*\t{{ hostvars[item]['ansible_hostname']}}\t{{ hostvars[item]['ansible_fqdn']}}\t{{ hostvars[item]['ansible_hostname']}}"
    line: "{{ hostvars[item]['ansible_ssh_host'] }}\t{{ hostvars[item]['ansible_fqdn']}}\t{{ hostvars[item]['ansible_hostname']}}"
    state: present
    backup: yes
  register: etchostsupdate
  when: " ansible_hostname not in item or ansible_hostname in item "
  with_items: "{{groups['db']}}"

- name: SSH KeyGen command
  become_user: "{{ ansible_user_id }}"
  tags: run
  shell: "ssh-keygen -q -b 2048 -t rsa -N '' -C 'ansible@user' -f ~/.ssh/id_rsa creates='~/.ssh/id_rsa' "

- name: Fetch the keyfile from one server to another
  become_user: "{{ ansible_user_id }}"
  tags: run
  fetch:
    src: "~/.ssh/id_rsa.pub"
    dest: "buffer/{{ansible_hostname}}-id_rsa.pub"
    flat: yes

- name: Copy the key add to authorized_keys using Ansible module
  tags: run
  become_user: "{{ ansible_user_id }}"
  authorized_key:
    user: "{{ ansible_user_id }}"
    state: present
    key: "{{ lookup('file','buffer/{{item}}-id_rsa.pub')}}"
  when: " item not in ansible_hostname "
  with_items: "{{ groups['db'] }}"

